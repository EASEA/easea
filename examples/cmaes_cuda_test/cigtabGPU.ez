*_________________________________________________________

Test functions
log normal adaptive mutation
Selection operator: Tournament
__________________________________________________________*/

\User declarations :
#define SIZE 22
#define X_MIN -1.
#define X_MAX 1.
#define ITER 50      
#define SIGMA  1.                     /*  mutation parameter */
#define PI 3.141592654

 
float pMutPerGene=0.1;

\end

\User functions:
//fitness function
#include <math.h>

__device__ __host__ float SQR(float d)
{
  return (d*d);
}

__device__ __host__ inline float rosenbrock( float const *x, int size)
{
  float qualitaet;
  int i;
  int DIM = size;
        qualitaet = 0.0;

        for( i = DIM-2; i >= 0; --i)
          qualitaet += 100.*SQR(SQR(x[i])-x[i+1]) + SQR(1.-x[i]);
        return ( qualitaet);
} /* f_rosenbrock() */


__device__ __host__ inline float cigtab(float *x, int size)
{
  int i;
  float sum = 0.;

  sum = x[0]*x[0] + 1e8*x[size-1]*x[size-1];
  for (i = 1; i < size-1; ++i)
    sum += 1e4*x[i]*x[i];
  return sum;
}
\end

\GenomeClass::display:
	for(int i=0; i<SIZE; i++){
		cout << Genome.x[i] << "|";
	}
\end

\Before everything else function:
\end

\After everything else function:
\end

\At the beginning of each generation function:
\end

\At the end of each generation function:
\end

\At each generation before reduce function:
\end

\User classes :
GenomeClass { 
  float x[SIZE];
}
\end

\GenomeClass::initialiser : // "initializer" is also accepted
\end

\GenomeClass::display:
\end

\GenomeClass::crossover :
\end

\GenomeClass::mutator : // Must return the number of mutations
  int NbMut=0;
return NbMut;
\end

\GenomeClass::evaluator : // Returns the score
  float Score= 0.0;
  Score= rosenbrock(Genome.x, SIZE);
  return Score;
\end

\User Makefile options: 
CPPFLAGS+=
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 100     // NB_GEN
  Time limit: 0                 // In seconds, 0 to deactive
  Population size : 1000     // POP_SIZE
  Offspring size : 2000
  Selection operator: Tournament 2.0
  Final reduce operator:Deterministic //Deterministic, Tournament, Random, Roulette(only Maximise)
  Elitism: Strong                       //Weak or Strong
  Elite: 5
  Print stats:true                         //Default: 1
  Generate csv stats file:false
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:false                          //Default: 0
\end
	
