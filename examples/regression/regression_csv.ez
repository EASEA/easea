/*_________________________________________________________

  This is a standard GP implementation on EASEA, 
  aimed for regression.

  use : easea -gp regression.ez
make

OR (if you'd like to exploit a CUDA-compatible graphic card)

easea -cuda_gp regression.ez
        make

  in order to generate and compile this code.
__________________________________________________________*/

\User declarations :
#include<math.h>
#include<stdlib.h>

#include "interface/CcsvParser.h"
#define csvFile "test.csv"
std::ifstream fs( csvFile );
CcsvParser parser( fs, ';' );


#define NO_FITNESS_CASES 25 //parser.getRowNumber() //1024

// VAR_LEN defines the number of dimensions of the problem
#define VAR_LEN 5 // parser.getColumnNumber()-1

// these 3 defines are mandatory here. Adjust as you like.

#define GROW_FULL_RATIO 0.5

// this is the number of learning cases computed in parallel.
// note that on 1024 is the maximum size on fermi architectures 512 on older cards.
#define NUMTHREAD 80
#define MAX_STACK 15


#define PI (3.141592653589793)
\end

\User functions:
//#define POLY(x) 5*cos(2*x+1)
/**
   This function generates data NO_FITNESS_CASES fitness cases,
   from the polynome POLY(X) with X randomly picked between (-1,1)

   @inputs address of the inputs array. (array will be allocated here)
   @outputs adddress of the outputs array. (array will be allocated here)

   @ret number of loaded fitness cases (should be equal to NO_FITNESS_CASES).   
 */
int generateData(float*** inputs, float** outputs){
    CcsvData csvData;

    (*inputs) = new float*[NO_FITNESS_CASES];
    (*outputs) = new float[NO_FITNESS_CASES];

     for (unsigned int i = 0; i < NO_FITNESS_CASES; i++){
        (*inputs)[i]=new float[VAR_LEN];
        for (unsigned int j = 0; j < VAR_LEN; j++){
            (*inputs)[i][j] = parser.getCell<float>(i,j);
          printf(" %f ", (*inputs)[i][j]);
        }
        (*outputs)[i] = parser.getCell<float>(i,VAR_LEN);
        printf(" %f \n", (*outputs)[i]);
    }
  return NO_FITNESS_CASES;
}


void free_data(){
  for( int i=0 ; i<NO_FITNESS_CASES ;i++ ) delete[] inputs[i] ;

  delete[] outputs;
  delete[] inputs;
} 
\end



\Before everything else function:
{
  generateData(&inputs,&outputs);
}
\end

\After everything else function:
{
  std::cout << toString(((IndividualImpl*)EA->population->Best)->root) << std::endl;

  free_data();
}
\end

\At the beginning of each generation function:
{
  //cout << "At the beginning of each generation function called" << endl;
}    
\end

\At the end of each generation function:
{ 
  //cout << "At the end of each generation function called" << endl;
}
\end

\At each generation before reduce function:
 //cout << "At each generation before replacement function called" << endl;
\end


\User classes :

GenomeClass {
  GPNode* root;
}
\end

\GenomeClass::display:

\end

\GenomeClass::initialiser :
{
  Genome.root = ramped_hh();
}
\end

\GenomeClass::crossover :
{
  simpleCrossOver(parent1,parent2,child);
  child.valid = false;
}
\end

\GenomeClass::mutator : // Must return the number of mutations
{
  simple_mutator(&Genome);

  
}
\end


\begin operator description :
OP_M, "PAS", 0, {RESULT=INPUT[0];};
OP_T, "PAD", 0, {RESULT=INPUT[1];};
OP_R, "PAM", 0, {RESULT=INPUT[2];};
OP_V, "SpO2", 0, {RESULT=INPUT[3];};
OP_D, "NIRSC", 0, {RESULT=INPUT[4];};
OP_ERC, "ERC", 0, {RESULT=ERC;};
OP_ADD, "+", 2, {RESULT=OP1+OP2;};
OP_SUB, "-", 2, {RESULT=OP1-OP2;};
OP_MUL, "*", 2, {RESULT=OP1*OP2;};
OP_SIN, "sin", 1, {RESULT=sinf(OP1);};
OP_COS, "cos", 1, {RESULT=cosf(OP1);};
OP_wEXP, "exp", 1, {RESULT=exp(OP1);};
OP_wLOG, "log", 1, {RESULT=log(OP1);};
OP_DIV, "/", 2, {
  if( !OP2 ) RESULT = 1;
  else RESULT = OP1/OP2;
};

\end


\GenomeClass::evaluator header:
\end

\GenomeClass::evaluator for each fc :
float expected_value = OUTPUT;
ERROR = (expected_value-EVOLVED_VALUE)*(expected_value-EVOLVED_VALUE);
\end

\GenomeClass::evaluator accumulator :
float eval=sqrtf(ERROR);
return eval;
\end


\User Makefile options: 

CXXFLAGS+=-I/usr/local/cuda/common/inc/ -I/usr/local/cuda/include/
LDFLAGS+=
\end

\Default run parameters :         // Please let the parameters appear in this order
  Number of generations : 500   // NB_GEN
  Time limit: 0 // In seconds, 0 to deactivate
  Population size : 50000//POP_SIZE
  Offspring size : 50000 // 40% 
  Mutation probability : 0.3       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : minimise      // Maximise
  Selection operator: Tournament 7
  Surviving parents: 100%//percentage or absolute  
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 5

  Elitism: Strong//Weak or Strong
  Elite: 1
  Print stats: true//Default: 1
  Generate csv stats file:false
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true//Default: 0

  Remote island model: false
  IP  file: ip.txt //File containing all the remote island's IP
  Server port : 2929
  Migration probability: 0.33

  Save population: false
  Start from file:false

  max init tree depth : 3
  min init tree depth : 2
  max tree depth : 5

  size of prog buffer : 200000000
\end
