/*_________________________________________________________

This file was automatically created by GUIDE v0.1c
User: collet
Date: Tue May 06 10:02:37 CEST 2003
File name: D:\travail\easea\listsort.ez
Target library: EO
Operating System: Windows XP

_________________________________________________________*/

\User declarations:
  static int _SIZE_=10;
  static double pMutPerGene=0.4;
  #include<cstring>
  inline void swap(int& a,int& b) {int c=a; a=b; b=c;}
\end

\User functions:
void cross(GenomeClass *pChild, GenomeClass *pParent, int locus){
  Element *p, *pChildList, *pParentList;
  pChildList=pChild->pList; pParentList=pParent->pList;
  for (int i=0;i<_SIZE_;i++){
    if (i>=locus){
      for(p=pChild->pList;pParentList->Value!=p->Value;p=p->pNext);
      swap(p->Value, pChildList->Value);
    }
    pChildList=pChildList->pNext;
    pParentList=pParentList->pNext;
  }
}
\end

\Before everything else function:
  if ((argc>1)&&(!strcmp(argv[1],"size"))) _SIZE_=atoi(argv[2]);
\end

\User classes:
  Element     { int     Value;
                Element *pNext; }
  GenomeClass { Element *pList; 
                int     Size;   }
\end

\After everything else function:
  std::cout << (*population) ;
\end

\GenomeClass::initialiser:
  Element *pElt;
  Genome.Size=0;                       
  Genome.pList=NULL;
  for (int i=0;i<_SIZE_;i++){  // creation of a linked list of _SIZE_ elements
    pElt=new Element;        // with the decreasing values:
    pElt->Value=i+1;         //       (_SIZE_, _SIZE_-1, ... , 3, 2, 1)
    pElt->pNext=Genome.pList;
    Genome.pList=pElt;
    Genome.Size++;
  }
\end

\GenomeClass::crossover:
  int locus=random(0,_SIZE_-1);
  cross(&child, &parent2, locus);
\end

\GenomeClass::mutator:
  int NbMut=0;
  Element *p=Genome.pList;
  while (p->pNext){
    if (tossCoin(pMutPerGene)){  //We swap the current value with the next
      swap(p->Value,p->pNext->Value);
      NbMut++;
    }
    p=p->pNext;
  }
\end

\GenomeClass::evaluator:
  int i=0,eval=0;
  Element *p=Genome.pList;
  while(p->pNext){
    if (p->Value==++i) eval+=10;
    if (p->Value<p->pNext->Value) eval+=4;
    else eval-=2;
    p=p->pNext;
  }
  if (p->Value==_SIZE_) eval+=10;

  return (eval<0 ? 0 : eval);
\end

\GenomeClass::display:
  os << "Size:" << Genome.Size << "\n";
  os << "pList:" << *(Genome.pList) << "\n";
  os << "This was MY display function !\n";
\end

\At the beginning of each generation function:
  if (NB_GEN-currentGeneration==10) pMutPerGene=0.1; 
\end

\At the end of each generation function:
  if (NB_GEN-currentGeneration==10) pMutPerGene=0.1; 
\end

\User Makefile options: 
CPPFLAGS+=
\end

\Default run parameters:
Mutation probability: 1.0
  Crossover probability: 0.9

// Evolution Engine:
  Evaluator goal: maximize
  Number of generations: 5
  Population size: 5
  Elite: 5
  Selection operator: Tournament 2 // ou 0,7 // deterministic // random // roulette
  Offspring size: 100%
  Reduce offspring operator: Roulette
  Surviving offspring: 5 
  Reduce parents operator: Tournament 2 
  Surviving parents: 5 
  Final reduce operator: Tournament 2
  Elitism: Weak

\end
