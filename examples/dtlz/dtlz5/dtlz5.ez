/*_____________________________________________________________

Template for an EASEA evolutionary algorithm for easea v1.0.3

This file contains template of DTLZ3 problem.

DTLZ5 :  Test CProblem n1.
DTLZ5 function contains 2/3 objectives.

Reference: 
_______________________________________________________________*/


\User declarations : // This section is copied on top of the output file

#include <operators/crossover/continuous/CbetaCrossover.h>
#include <operators/mutation/continuous/CSelfGaussianMutation.h>
#include <operators/crossover/continuous/CsbxCrossover.h>
#include <operators/mutation/continuous/CPolynomialMutation.h>

#include <CLogger.h>
#include <shared/CConstant.h>


#include <numeric>

#include <math.h>



#define NB_VARIABLES 10
#define NB_OBJECTIVES 3
#define NB_CONSTRAINTS 0
#define XOVER_PROB  0.9
#define XOVER_DIST_ID 20.0 //0.5 //20.0
#define MUT_PROB  1.0/NB_VARIABLES
#define MUT_DIST_ID 20.0
#define QMETRICS 
#define PARETO_TRUE_FILE "../pf/dtlz5/3D/DTLZ5.3D.pf" 
#define PBLM_NAME "DTLZ5"

//typedef easea::operators::crossover::continuous::beta::CbetaCrossover<TT, TRandom &> TCrossover;
//typedef easea::operators::mutation::continuous::pm::CSelfGaussianMutation<TT, TRandom &> TMutation;

typedef easea::operators::crossover::continuous::sbx::CsbxCrossover<TT, TRandom &> TCrossover;
typedef easea::operators::mutation::continuous::pm::CPolynomialMutation<TT, TRandom &> TMutation;
//TRandom m_generator;
TP m_problem(NB_OBJECTIVES, NB_VARIABLES, TBoundary(NB_OBJECTIVES - 1 + NB_VARIABLES, std::make_pair<TT, TT>(0, 1)));
TCrossover crossover(m_generator, 1, m_problem.getBoundary(), 20);
TMutation m_mutation(m_generator, 1 / (TT)m_problem.getBoundary().size(), m_problem.getBoundary(), 20);


\end

\User functions:


template <typename TT, typename TIter>
TT interval(TIter begin, TIter end)
{
        TT sum = 0;
        for (TIter i = begin; i != end; ++i)
        {
                const TT temp = *i - .5;
                sum += temp * temp;
        }
        return sum;
}

template <typename TT, typename TIter>
void degenerate(TIter begin, TIter end, const TT distance, const size_t manifold)
{
             assert(0 < manifold && manifold <= std::distance(begin, end));
             for (TIter i = begin + manifold; i != end; ++i)
                      *i = (.5 + distance * *i) / (distance + 1);
}
template <typename TT, typename TIter>
void convert(TIter begin, TIter end)
{
	for (TIter i = begin; i != end; ++i)
	{
		if (0 > *i && *i > 1)
		{
			LOG_ERROR(errorCode::value,"Convert angles error");
			exit(-1); 
		}    
                *i = *i * PI * 0.5;
        }
}

template <typename TIterAngle, typename TIterObjective, typename TT>
void concave(TIterAngle angleBegin, TIterAngle angleEnd, TIterObjective objectiveBegin, TIterObjective objectiveEnd, const TT radius)
{
        assert(std::distance(objectiveBegin, objectiveEnd) > 0);
        {
		TT temp = radius;
                for (TIterAngle angle = angleBegin; angle != angleEnd; ++angle)
                {
			if (*angle < 0 && *angle > PI * 0.5)
			{
				LOG_ERROR(errorCode::value, "Wring value of angle");
				exit(-1);
			}
                        temp *= cos(*angle);
                }
                *objectiveBegin = temp;
        }

	for (TIterObjective objective = ++TIterObjective(objectiveBegin); objective != objectiveEnd; ++objective)
        {
		const size_t nObjective = objective - objectiveBegin;
		const size_t index = std::distance(angleBegin, angleEnd) - nObjective;
		TIterAngle _angleEnd = angleBegin + index;
		TT temp = radius;
                for (TIterAngle angle = angleBegin; angle != _angleEnd; ++angle)
                        temp *= cos(*angle);
                *objective = temp * sin(*_angleEnd);
        }
}



inline constexpr double getCCrossoverProbability()  {
  return XOVER_PROB;
} 
inline constexpr double getCMutationProbability()  {
  return MUT_PROB;
} 
inline constexpr double getCCrossoverDistributionId() {
  return XOVER_DIST_ID;
} 
inline constexpr double getCMutationDistributionId() {
  return MUT_DIST_ID;
} 
inline constexpr int getNumberOfObjectives() {
  return NB_OBJECTIVES ;
}
inline constexpr int getNumberOfVariables() {
  return NB_VARIABLES ;
}
inline constexpr int getNumberOfConstraints(){
  return NB_CONSTRAINTS ;
}

\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end

\User classes :

GenomeClass { 
  // need to declare the genome here
 int x;
}
\end

\Before everything else function:
//cout<<"Before everything else function called "<<endl;
\end

\After everything else function:
//cout << "After everything else function called" << endl;
\end

\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  // the genome to initialise is known as "Genome"

\end
/*
\GenomeClass::crossover : 
  // must create "child" out of "parent1" and "parent2"
\end

\GenomeClass::mutator : // Must return the number of mutations
  // must mutate "Genome"
  return 0;
\end
*/
\GenomeClass::evaluator : // Returns the score as a real value
  // uses Genome to evaluate the quality of the individual

        TI::m_objective.resize(getNumberOfObjectives());
        const size_t pVariables = getNumberOfObjectives() - 1;
	
        const TT g =  interval<TT>(TI::m_variable.begin() + pVariables, TI::m_variable.end());
	const TT r =1 + g;
        TV angle(TI::m_variable.begin(), TI::m_variable.begin() + pVariables);
	
	degenerate(angle.begin(), angle.end(), g, 1);
        convert<TT>(angle.begin(), angle.end());
        concave(angle.begin(), angle.end(), TI::m_objective.begin(), TI::m_objective.end(), r);

	return 1;

\end

\User Makefile options: 
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 500    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 1000 			   //POP_SIZE
  Offspring size : 1000           // or a xx%
//  CMutation probability : 1.0      // MUT_PROB
//  CCrossover probability : 0.9      // XOVER_PROB
  Evaluator goal : maximize      // maximise
  Selection operator: Tournament 2.0
/*  Surviving parents: 100%        // Percentage or absolute  
  Surviving offspring: 100%      // Percentage or absolute  */
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
/*  Final reduce operator: Tournament 2 */

  Elitism: Strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats: false				         // Default: 0
  Save population: false

/*  Remote island model: false
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.33    // Probability of sending an individual per generation
  Server port : 2929

  Save population: true
  Start from file:false 
*/
\end

