/*_____________________________________________________________

Template for an EASEA evolutionary algorithm for easea v1.0.3

This file contains template of DTLZ1 problem.

DTLZ1 :  Test CProblem n1.
DTLZ1 function contains 2/3 objectives.

Reference: 
_______________________________________________________________*/


\User declarations : // This section is copied on top of the output file

#include <problems/CProblem.h> 
#include <shared/CConstant.h>
#include <CLogger.h>

#include <cassert>
#include <numeric>

#include <math.h>



#define NB_VARIABLES 10
#define NB_OBJECTIVES 3
#define NB_CONSTRAINTS 0

#define XOVER_DIST_ID 20.0

#define MUT_DIST_ID 20.0

#define QMETRICS 

#define PARETO_TRUE_FILE "../pf/dtlz1/3D/DTLZ1.3D.pf" 
#define PBLM_NAME "DTLZ1"

double cr = 0.5;
double sf = 0.5;

TP m_problem(NB_OBJECTIVES, NB_VARIABLES, TBoundary(NB_OBJECTIVES - 1 + NB_VARIABLES, std::make_pair<TT, TT>(0, 1)));
TCrossover m_crossover(m_generator, cr, m_problem.getBoundary(), sf);

//TCrossover crossover(m_generator, 1, m_problem.getBoundary(), XOVER_DIST_ID);
//TMutation m_mutation(m_generator, 1 / (TT)m_problem.getBoundary().size(), m_problem.getBoundary(), MUT_DIST_ID);




\end

\User functions:

inline constexpr int getNumberOfObjectives()
{
	return NB_OBJECTIVES ;
}
inline constexpr int getNumberOfVariables()
{
	return NB_VARIABLES ;
}

template <typename TT, typename TIter>
TT interval(TIter begin, TIter end)
{
        TT sum = 0;
	for (TIter i = begin; i != end; ++i)
	{
                const TT temp = *i - .5;
                sum += temp * temp - cos(20 * PI * temp);
        }
        return 100 * (std::distance(begin, end) + sum);
}
template <typename TTtervar, typename TTterObjective, typename TT>
void linear(TTtervar varBegin, TTtervar varEnd, TTterObjective objectiveBegin, TTterObjective objectiveEnd, const TT distance)
{
        if (std::distance(varBegin, varEnd) < 0 && std::distance(varBegin, varEnd) > std::distance(objectiveBegin, objectiveEnd))
		LOG_ERROR(errorCode::value, "Wrong size of decision variable");
	*objectiveBegin = std::accumulate(varBegin, varEnd, distance, std::multiplies<TT>());

	for (TTterObjective objective = ++TTterObjective(objectiveBegin); objective != objectiveEnd; ++objective)
	{
                const size_t nObjective = objective - objectiveBegin;
		const size_t index = std::distance(varBegin, varEnd) - nObjective;

		TTtervar ivarEnd = varBegin + index;
                *objective = std::accumulate(varBegin, ivarEnd, distance, std::multiplies<TT>()) * (1 - *ivarEnd);
        }
}

\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end

\User classes :

GenomeClass { 
  // need to declare the genome here
 int x;
}
\end

\Before everything else function:
//cout<<"Before everything else function called "<<endl;
\end

\After everything else function:
//cout << "After everything else function called" << endl;
\end

\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
  // the genome to initialise is known as "Genome"

\end
/*
\GenomeClass::crossover : 
  // must create "child" out of "parent1" and "parent2"
\end

\GenomeClass::mutator : // Must return the number of mutations
  // must mutate "Genome"
  return 0;
\end
*/
\GenomeClass::evaluator : // Returns the score as a real value
  // uses Genome to evaluate the quality of the individual

        TI::m_objective.resize(getNumberOfObjectives());
        const size_t pVariables = getNumberOfObjectives() - 1;
	
        const TT g = (1 + interval<TT>(TI::m_variable.begin() + pVariables, TI::m_variable.end())) * 0.5;
        linear(TI::m_variable.begin(), TI::m_variable.begin() + pVariables, TI::m_objective.begin(), TI::m_objective.end(), g);
	return 1;

\end

\User Makefile options: 
\end

\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 500    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 1000 			   //POP_SIZE
  Offspring size : 1000           // or a xx%
//  CMutation probability : 1.0      // MUT_PROB
//  CCrossover probability : 0.9      // XOVER_PROB
  Evaluator goal : maximize      // maximise
  Selection operator: Tournament 2.0
/*  Surviving parents: 100%        // Percentage or absolute  
  Surviving offspring: 100%      // Percentage or absolute  */
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
/*  Final reduce operator: Tournament 2 */

  Elitism: Strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:false			
  Generate gnuplot script:false
  Generate R script:false
  Plot stats: false				         // Default: 0
  Save population: false

/*  Remote island model: false
  IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.33    // Probability of sending an individual per generation
  Server port : 2929

  Save population: true
  Start from file:false 
*/
\end

