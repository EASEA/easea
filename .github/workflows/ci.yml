# action originating from CMake action
name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  linux-build-install-test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    name: Build and install Easea and examples

    steps:
    - uses: actions/checkout@v3
      #- uses: Jimver/cuda-toolkit@v0.2.7
      #id: cuda-toolkit
      #with:
      #  cuda: '11.7.0'

    - name: Create badge repository
      run: mkdir -p badges

    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        TMP_PULL_HEAD_REF="${{ github.head_ref }}"
        TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
        EXPORT_VALUE=""
        if [ "${TMP_PULL_HEAD_REF}" != "" ]
        then
            EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
        else
            EXPORT_VALUE="${TMP_GITHUB_REF}"
        fi
        echo "##[set-output name=branch;]${EXPORT_VALUE}"

    - name: Configure CMake
      id: configure
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      continue-on-error: true

    - name: Build
      id: build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      continue-on-error: true

    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: 'Build'
        status: ${{steps.build.outcome == 'success' && 'passed' || 'failed' }}
        color: ${{steps.build.outcome == 'success' && 'green' || 'red' }}
        path: badges/build.svg

    - name: Install
      id: install
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: sudo cmake --install ${{github.workspace}}/build
      continue-on-error: true

    - name: Output install status
      run: echo "##[set-ouput name=install;]${{steps.install.outcome}}"


    - name: Build examples
      id: examples
      run: |
        EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" | tee examples.output
        result_code=${PIPESTATUS[0]}
        echo "::set-output name=examples::$(cat examples.log)"
        exit $result_code
      continue-on-error: true

    - name: Output examples status
      run: |
        NBE=$(echo ${{steps.examples.outputs.examples}} | sed -n 's/passed: \([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
        PASSED=$(echo ${{steps.examples.outputs.examples}} | sed -n 's/passed: \([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
        echo "##[set-ouput name=nb_examples;]${NBE}"
        echo "##[set-ouput name=passed;]${PASSED}"

# Badges
    - uses: actions/checkout@v1
      with:
        ref: badges

    - name: Commit badge
      env:
        BRANCH: ${{ steps.extract_branch.outputs.branch }}
      working-directory: ./badges
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        mkdir -p "${BRANCH}"
        mv * "${BRANCH}"
        git add "${BRANCH}/"
        # Will give error if badge did not changed
        git commit -m "Add/Update badge" || true

    - name: Push badge commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: badges
        directory: badges
