# action originating from CMake action
name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  pre-ci:
    name: Configure workflow
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}

    steps:
    - uses: actions/checkout@v3
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        TMP_PULL_HEAD_REF="${{ github.head_ref }}"
        TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
        EXPORT_VALUE=""
        if [ "${TMP_PULL_HEAD_REF}" != "" ]
        then
            EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
        else
            EXPORT_VALUE="${TMP_GITHUB_REF}"
        fi
        echo "::set-output name=branch::${EXPORT_VALUE}"

  configure-MacOS:
    name: Configure Easea (MacOS)
    runs-on: macos-latest
    needs: [pre-ci]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
    - uses: actions/checkout@v3

    - name: Installing dependencies if needed
      shell: bash
      run: |
        brew install bison libomp boost
        export PATH="$(brew --prefix bison)/bin:$PATH"

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-configured-MacOS
        path: ${{github.workspace}}/build

    - name: Save status
      if: ${{ always() }}
      id: status
      run: echo "::set-output name=status::${{ job.status }}"
      shell: bash

  configure-Windows:
    name: Configure Easea (Windows)
    runs-on: windows-latest
    needs: [pre-ci]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
    - uses: actions/checkout@v3

    - name: Installing dependencies if needed
      run: choco install winflexbison3 boost-msvc-14.3
      shell: bash

    - name: Configure CMake
      run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-configured-Windows
        path: ./build


  configure-Linux:
    name: Configure Easea (Linux)
    runs-on: ubuntu-latest
    needs: [pre-ci]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
    - uses: actions/checkout@v3

    - name: Installing dependencies if needed
      shell: bash
      run: |
        sudo apt install -y libboost-all-dev

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-configured-Linux
        path: ${{github.workspace}}/build

    - name: Save status
      if: ${{ always() }}
      id: status
      run: echo "::set-output name=status::${{ job.status }}"
      shell: bash

  build-Linux:
    name: Build Easea (Linux)
    runs-on: ubuntu-latest
    needs: [configure-Linux]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          sudo apt install -y libboost-all-dev

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-configured-Linux
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Building easea
        id: build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-Linux
          path: ${{github.workspace}}/build

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash

  build-Windows:
    name: Build Easea (Windows)
    runs-on: windows-latest
    needs: [configure-Windows]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-configured-Windows
          path: ./build

      - name: Installing dependencies if needed
        run: choco install winflexbison3 boost-msvc-14.3
        shell: bash

      - name: Configure CMake
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Building easea
        id: build
        run: cmake --build ./build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-Windows
          path: ${{github.workspace}}/build

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash

  build-MacOS:
    name: Build Easea (MacOS)
    runs-on: macos-latest
    needs: [configure-MacOS]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          brew install bison libomp boost
          export PATH="$(brew --prefix bison)/bin:$PATH"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-configured-MacOS
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Building easea
        id: build
        run: VERBOSE=1 cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built-MacOS
          path: ${{github.workspace}}/build

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash

  install-Linux:
    name: Install Easea (Linux)
    runs-on: ubuntu-latest
    needs: [build-Linux]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          sudo apt install -y libboost-all-dev

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-Linux
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Install
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-Linux
          path: /usr/local/easena

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash

  install-MacOS:
    name: Install Easea (MacOS)
    runs-on: macos-latest
    needs: [build-MacOS]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          brew install bison libomp boost
          export PATH="$(brew --prefix bison)/bin:$PATH"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-MacOS
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Install
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-MacOS
          path: /usr/local/easena

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash

  install-Windows:
    name: Install Easea (Windows)
    runs-on: windows-latest
    needs: [build-Windows]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        run: choco install winflexbison3 boost-msvc-14.3
        shell: bash

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-Windows
          path: ./build

      - name: Generating configuration
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Install
        run: sudo cmake --install ./build
        shell: bash

      - name: DEBUG
        run: ls -al "/"
      - run: ls -al "D:"
      - run: ls -al "D:/*"
      - run: ls -al "C:/*"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-Windows
          path: c:/Program Files/easena

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"
        shell: bash


  test-Linux:
    name: Test Easea (Linux)
    runs-on: ubuntu-latest
    needs: [install-Linux]
    outputs:
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          sudo apt install -y libboost-all-dev

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-Linux
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Installing easea
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Installing CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        with:
          cuda: '11.7.0'

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "::set-output name=total::${NBE}"
          echo "::set-output name=passed::${PASSED}"
          echo "::set-output name=failed::${FAILED}"
        shell: bash

  test-MacOS:
    name: Test Easea (MacOS)
    runs-on: macos-latest
    needs: [install-Macos]
    outputs:
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        shell: bash
        run: |
          brew install bison libomp coreutils boost gnu-sed
          export PATH="$(brew --prefix bison)/bin:$PATH"
          export PATH="$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-MacOS
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Installing easea
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" --no-cuda | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "::set-output name=total::${NBE}"
          echo "::set-output name=passed::${PASSED}"
          echo "::set-output name=failed::${FAILED}"
        shell: bash

  test-Windows:
    name: Test Easea (Windows)
    runs-on: windows-latest
    needs: [install-Windows]
    outputs:
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies if needed
        run: choco install winflexbison3 boost-msvc-14.3
        shell: bash

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built-Windows
          path: ./build

      - name: Generating configuration
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: Installing easea
        run: sudo cmake --install ./build
        shell: bash

      - name: Build examples
        run: |
          EZ_PATH="C:/Program Files/easena/" bash ${{github.workspace}}/examples/build-all.sh "C:/Program Files/easena" | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "::set-output name=total::${NBE}"
          echo "::set-output name=passed::${PASSED}"
          echo "::set-output name=failed::${FAILED}"
        shell: bash

          # badges:
          #   runs-on: ubuntu-latest
          #   name: Create badges
          #   needs: [pre-ci, configure, build, install, test]
          #   if: ${{ always() }}
          #
          #   steps:
          #     - uses: actions/checkout@v3
          #       with:
          #         ref: badges
          #
          #     - run: mkdir -p badges
          #     - run: echo ${{ needs.configure.outputs.status }}  ${{ needs.build.outputs.status }} ${{ needs.install.outputs.status }} ${{ needs.test.outputs.total }} ${{ needs.test.outputs.passed }} ${{ needs.test.outputs.failed }}
          #
          #     - name: Generate configure badge
          #       uses: emibcn/badge-action@v1
          #       with:
          #         label: 'configure'
          #         status: ${{ needs.configure.outputs.status == 'success' && 'passed' || 'failed' }}
          #         color: ${{ needs.configure.outputs.status == 'success' && 'green' || 'red' }}
          #         path: badges/configure.svg
          #
          #     - name: Generate build badge
          #       uses: emibcn/badge-action@v1
          #       with:
          #         label: 'build'
          #         status: ${{ needs.build.outputs.status == 'success' && 'passed' || 'failed' }}
          #         color: ${{ needs.build.outputs.status == 'success' && 'green' || 'red' }}
          #         path: badges/build.svg
          #
          #     - name: Generate install badge
          #       uses: emibcn/badge-action@v1
          #       with:
          #         label: 'install'
          #         status: ${{ needs.install.outputs.status == 'success' && 'passed' || 'failed' }}
          #         color: ${{ needs.install.outputs.status == 'success' && 'green' || 'red' }}
          #         path: badges/install.svg
          #
          #     - name: Generate test badge if all failed
          #       uses: emibcn/badge-action@v1
          #       if: ${{ needs.test.outputs.total == '' }}
          #       with:
          #         label: 'test'
          #         status: 'ERROR'
          #         color: 'red'
          #         path: badges/test.svg
          #
          #     - name: Generate test badge if run
          #       uses: emibcn/badge-action@v1
          #       if: ${{ needs.test.outputs.total != '' }}
          #       with:
          #         label: 'Working examples'
          #         status: ${{ needs.test.outputs.passed }}/${{ needs.test.outputs.total }}
          #         color: ${{ needs.test.outputs.failed == '0' && 'green' ||
          #                   needs.test.outputs.failed >= 1 && needs.test.outputs.failed <= 3 && 'yellow' ||
          #                   needs.test.outputs.failed >= 3 && needs.test.outputs.failed <= 6 && 'orange' ||
          #                   'red' }}
          #         path: badges/test.svg
          #
          #     - name: Commit badge
          #       env:
          #         BRANCH: ${{ needs.pre-ci.outputs.branch }}
          #       working-directory: ./badges
          #       run: |
          #         git config --local user.email "action@github.com"
          #         git config --local user.name "GitHub Action"
          #         mkdir -p "${BRANCH}"
          #         mv *.svg "${BRANCH}"
          #         git add "${BRANCH}/"
          #         # Will give error if badge did not changed
          #         git commit -m "Add/Update badge for branch: ${BRANCH}" || true
          #
          #     - name: Push badge commit
          #       uses: ad-m/github-push-action@master
          #       with:
          #         github_token: ${{ secrets.GITHUB_TOKEN }}
          #         branch: badges
          #         directory: badges
