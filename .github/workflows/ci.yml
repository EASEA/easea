# action originating from CMake action
name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  pre-ci:
    name: Configure workflow
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}

    steps:
    - uses: actions/checkout@v3
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        TMP_PULL_HEAD_REF="${{ github.head_ref }}"
        TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
        EXPORT_VALUE=""
        if [ "${TMP_PULL_HEAD_REF}" != "" ]
        then
            EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
        else
            EXPORT_VALUE="${TMP_GITHUB_REF}"
        fi
        echo "::set-output name=branch::${EXPORT_VALUE}"

  configure:
    runs-on: ubuntu-latest
    name: Configure Easea
    needs: [pre-ci]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-configured
        path: ${{github.workspace}}/build

    - name: Save status
      if: ${{ always() }}
      id: status
      run: echo "::set-output name=status::${{ job.status }}"

  build:
    runs-on: ubuntu-latest
    name: Build Easea
    needs: [configure]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-configured
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Building easea
        id: build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"

  install:
    runs-on: ubuntu-latest
    name: Install Easea
    needs: [build]
    outputs:
      status: ${{ steps.status.outputs.status }}

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Install
        run: sudo cmake --install ${{github.workspace}}/build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed
          path: /usr/local/easena

      - name: Save status
        if: ${{ always() }}
        id: status
        run: echo "::set-output name=status::${{ job.status }}"

  test:
    runs-on: ubuntu-latest
    name: Test Easea
    needs: [install]
    outputs:
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

      - name: Generating configuration
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Installing easea
        run: sudo cmake --install ${{github.workspace}}/build

      - name: Installing CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        with:
          cuda: '11.7.0'

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code

      - name: Uploading artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: examples
          path: ${{github.workspace}}/examples.output

  badges:
    runs-on: ubuntu-latest
    name: Create badges
    needs: [pre-ci, configure, build, install, test]
    if: ${{ always() }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: badges

      - run: mkdir -p badges
      - run: echo ${{ needs.configure.outputs.status }}  ${{ needs.build.outputs.status }} ${{ needs.install.outputs.status }} ${{ needs.test.outputs }}

      - name: Generate configure badge
        uses: emibcn/badge-action@v1
        with:
          label: 'configure'
          status: ${{ needs.configure.outputs.status == 'success' && 'passed' || 'failed' }}
          color: ${{ needs.configure.outputs.status == 'success' && 'green' || 'red' }}
          path: badges/configure.svg

      - name: Generate build badge
        uses: emibcn/badge-action@v1
        with:
          label: 'build'
          status: ${{ needs.build.outputs.status == 'success' && 'passed' || 'failed' }}
          color: ${{ needs.build.outputs.status == 'success' && 'green' || 'red' }}
          path: badges/build.svg

      - name: Generate install badge
        uses: emibcn/badge-action@v1
        with:
          label: 'install'
          status: ${{ needs.install.outputs.status == 'success' && 'passed' || 'failed' }}
          color: ${{ needs.install.outputs.status == 'success' && 'green' || 'red' }}
          path: badges/install.svg

      - name: Downloading examples output
        uses: actions/download-artifact@v3
        with:
          name: examples
          path: ${{github.workspace}}/examples.output

      - name: Parsing examples output
        id: examples
        run: LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "::set-ouput name=total::${NBE}"
          echo "::set-ouput name=passed::${PASSED}"
          echo "::set-ouput name=failed::${FAILED}"

      - run: echo ${{ steps.examples.outputs }}

      - name: Generate test badge if all failed
        uses: emibcn/badge-action@v1
        if: ${{ steps.examples.outputs.total == '' }}
        with:
          label: 'test'
          status: 'ERROR'
          color: 'red'
          path: badges/test.svg

      - name: Generate test badge if run
        uses: emibcn/badge-action@v1
        if: ${{ steps.examples.outputs.total != '' }}
        with:
          label: 'test'
          status: ${{ steps.examples.outputs.passed }} '/' ${{ steps.examples.outputs.total }}
          color: ${{ steps.examples.outputs.failed == '0' && 'green' ||
                    steps.examples.outputs.failed >= 1 && steps.examples.outputs.failed <= 3 && 'yellow' ||
                    steps.examples.outputs.failed >= 3 && steps.examples.outputs.failed <= 6 && 'orange' ||
                    'red' }}
          path: badges/test.svg


      - name: Commit badge
        env:
          BRANCH: ${{ needs.pre-ci.outputs.branch }}
        working-directory: ./badges
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          mkdir -p "${BRANCH}"
          mv *.svg "${BRANCH}"
          git add "${BRANCH}/"
          # Will give error if badge did not changed
          git commit -m "Add/Update badge for branch: ${BRANCH}" || true

      - name: Push badge commit
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: badges
          directory: badges
