# action originating from CMake action
name: Faster-CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  pre-ci:
    name: Configure workflow
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}

    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          TMP_PULL_HEAD_REF="${{ github.head_ref }}"
          TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
          EXPORT_VALUE=""
          if [ "${TMP_PULL_HEAD_REF}" != "" ]
          then
              EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
          else
              EXPORT_VALUE="${TMP_GITHUB_REF}"
          fi
          echo "branch=${EXPORT_VALUE}" >> $GITHUB_OUTPUT

  Linux:
    name: Build, install and test (Linux)
    runs-on: ubuntu-latest
    needs: [pre-ci]
    outputs:
      configure: ${{ steps.cmake-configure.outcome }}
      build: ${{ steps.cmake-build.outcome }}
      install: ${{ steps.cmake-install.outcome }}
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies
        run: sudo apt install -y libboost-all-dev

      - name: Installing CUDA
        uses: Jimver/cuda-toolkit@v0.2.10
        id: cuda-toolkit
        with:
          cuda: '12.1.0'

      - name: CMake configure
        id: cmake-configure
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: CMake build
        id: cmake-build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: CMake Install
        id: cmake-install
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Upload installation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-Linux
          path: /usr/local/easena

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" --ignore-errors "cmaes_cuda_test regression_cuda memetic_cuda memetic_cuda_custom" | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "total=${NBE}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        shell: bash

  MacOS:
    name: Build, install and test (MacOS)
    runs-on: macos-latest
    needs: [pre-ci]
    outputs:
      configure: ${{ steps.cmake-configure.outcome }}
      build: ${{ steps.cmake-build.outcome }}
      install: ${{ steps.cmake-install.outcome }}
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies
        shell: bash
        run: |
          brew install bison libomp coreutils boost gnu-sed cmake
          export PATH="$(brew --prefix bison)/bin:$PATH"
          export PATH="$(brew --prefix)/opt/gnu-sed/libexec/gnubin:$PATH"

      - name: CMake configure
        id: cmake-configure
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_OPENMP=OFF
        shell: bash

      - name: CMake build
        id: cmake-build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: CMake Install
        id: cmake-install
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Upload installation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-MacOS
          path: /usr/local/easena

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" --no-cuda | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | gsed -n 's/passed://p' | gsed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | gsed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | gsed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "total=${NBE}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        shell: bash

  Windows:
    name: Build, install and test (Windows)
    runs-on: windows-latest
    needs: [pre-ci]
    outputs:
      configure: ${{ steps.cmake-configure.outcome }}
      build: ${{ steps.cmake-build.outcome }}
      install: ${{ steps.cmake-install.outcome }}
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies
        run: choco install winflexbison3 sed
        shell: bash

      - name: Installing Boost
        run: choco install boost-msvc-14.3

          #- name: Installing CUDA
          #  uses: Jimver/cuda-toolkit@v0.2.10
          #  id: cuda-toolkit
          #  with:
          #    cuda: '12.1.0'

      - name: CMake configure
        id: cmake-configure
        run: cmake -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        shell: bash

      - name: CMake build
        id: cmake-build
        run: cmake --build ./build --config ${{env.BUILD_TYPE}}
        shell: bash

      - name: CMake Install
        id: cmake-install
        run: cmake --install ./build
        shell: bash

      - name: Upload installation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed-Windows
          path: C:/Program Files (x86)/EASENA/

      - name: Build examples
        run: |
          EZ_PATH="C:/Program Files (x86)/EASENA/" bash ./examples/build-all.sh "C:/Program Files (x86)/EASENA/bin/easena.exe" --no-cuda | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "total=${NBE}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        shell: bash

  Badges:
      runs-on: ubuntu-latest
      name: Create badges
      needs: [Windows, Linux, MacOS, pre-ci]
      if: ${{ always() && github.ref == 'refs/heads/master' }}
      #if: ${{ always() }}

      steps:
        - uses: actions/checkout@v3
          with:
            ref: badges

        - run: mkdir -p badges
        - run: echo 

        # Configure
        - name: Generate configure badge (Windows)
          uses: emibcn/badge-action@v1
          with:
            label: 'configure'
            status: ${{ needs.Windows.outputs.configure == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Windows.outputs.configure == 'success' && 'green' || 'red' }}
            path: badges/configure-windows.svg
        - name: Generate configure badge (Linux)
          uses: emibcn/badge-action@v1
          with:
            label: 'configure'
            status: ${{ needs.Linux.outputs.configure == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Linux.outputs.configure == 'success' && 'green' || 'red' }}
            path: badges/configure-linux.svg
        - name: Generate configure badge (MacOS)
          uses: emibcn/badge-action@v1
          with:
            label: 'configure'
            status: ${{ needs.MacOS.outputs.configure == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.MacOS.outputs.configure == 'success' && 'green' || 'red' }}
            path: badges/configure-macos.svg

        # Build
        - name: Generate build badge (Windows)
          uses: emibcn/badge-action@v1
          with:
            label: 'build'
            status: ${{ needs.Windows.outputs.build == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Windows.outputs.build == 'success' && 'green' || 'red' }}
            path: badges/build-windows.svg
        - name: Generate build badge (Linux)
          uses: emibcn/badge-action@v1
          with:
            label: 'build'
            status: ${{ needs.Linux.outputs.build == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Linux.outputs.build == 'success' && 'green' || 'red' }}
            path: badges/build-linux.svg
        - name: Generate build badge (MacOS)
          uses: emibcn/badge-action@v1
          with:
            label: 'build'
            status: ${{ needs.MacOS.outputs.build == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.MacOS.outputs.build == 'success' && 'green' || 'red' }}
            path: badges/build-macos.svg

        # Install
        - name: Generate install badge (Windows)
          uses: emibcn/badge-action@v1
          with:
            label: 'install'
            status: ${{ needs.Windows.outputs.install == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Windows.outputs.install == 'success' && 'green' || 'red' }}
            path: badges/install-windows.svg
        - name: Generate install badge (Linux)
          uses: emibcn/badge-action@v1
          with:
            label: 'install'
            status: ${{ needs.Linux.outputs.install == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.Linux.outputs.install == 'success' && 'green' || 'red' }}
            path: badges/install-linux.svg
        - name: Generate install badge (MacOS)
          uses: emibcn/badge-action@v1
          with:
            label: 'install'
            status: ${{ needs.MacOS.outputs.install == 'success' && 'passed' || 'failed' }}
            color: ${{ needs.MacOS.outputs.install == 'success' && 'green' || 'red' }}
            path: badges/install-macos.svg

        # Tests
        - name: Generate test badge if all failed (Windows)
          uses: emibcn/badge-action@v1
          if: ${{ needs.Windows.outputs.total == '' }}
          with:
            label: 'test'
            status: 'ERROR'
            color: 'red'
            path: badges/test-windows.svg
        - name: Generate test badge if run (Windows)
          uses: emibcn/badge-action@v1
          if: ${{ needs.Windows.outputs.total != '' }}
          with:
            label: 'Working examples'
            status: ${{ needs.Windows.outputs.passed }}/${{ needs.Windows.outputs.total }}
            color: ${{ needs.Windows.outputs.failed == '0' && 'green' ||
                      needs.Windows.outputs.failed >= 1 && needs.Windows.outputs.failed <= 3 && 'yellow' ||
                      needs.Windows.outputs.failed >= 3 && needs.Windows.outputs.failed <= 6 && 'orange' ||
                      'red' }}
            path: badges/test-windows.svg
        - name: Generate test badge if all failed (Linux)
          uses: emibcn/badge-action@v1
          if: ${{ needs.Linux.outputs.total == '' }}
          with:
            label: 'test'
            status: 'ERROR'
            color: 'red'
            path: badges/test-linux.svg
        - name: Generate test badge if run (Linux)
          uses: emibcn/badge-action@v1
          if: ${{ needs.Linux.outputs.total != '' }}
          with:
            label: 'Working examples'
            status: ${{ needs.Linux.outputs.passed }}/${{ needs.Linux.outputs.total }}
            color: ${{ needs.Linux.outputs.failed == '0' && 'green' ||
                      needs.Linux.outputs.failed >= 1 && needs.Linux.outputs.failed <= 3 && 'yellow' ||
                      needs.Linux.outputs.failed >= 3 && needs.Linux.outputs.failed <= 6 && 'orange' ||
                      'red' }}
            path: badges/test-linux.svg
        - name: Generate test badge if all failed (MacOS)
          uses: emibcn/badge-action@v1
          if: ${{ needs.MacOS.outputs.total == '' }}
          with:
            label: 'test'
            status: 'ERROR'
            color: 'red'
            path: badges/test-macos.svg
        - name: Generate test badge if run (MacOS)
          uses: emibcn/badge-action@v1
          if: ${{ needs.MacOS.outputs.total != '' }}
          with:
            label: 'Working examples'
            status: ${{ needs.MacOS.outputs.passed }}/${{ needs.MacOS.outputs.total }}
            color: ${{ needs.MacOS.outputs.failed == '0' && 'green' ||
                      needs.MacOS.outputs.failed >= 1 && needs.MacOS.outputs.failed <= 3 && 'yellow' ||
                      needs.MacOS.outputs.failed >= 3 && needs.MacOS.outputs.failed <= 6 && 'orange' ||
                      'red' }}
            path: badges/test-macos.svg

        - name: Commit badge
          env:
            BRANCH: ${{ needs.pre-ci.outputs.branch }}
          working-directory: ./badges
          run: |
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            mkdir -p "${BRANCH}"
            mv *.svg "${BRANCH}"
            git add "${BRANCH}/"
            # Will give error if badge did not changed
            git commit -m "Add/Update badge for branch: ${BRANCH}" || true

        - name: Push badge commit
          uses: ad-m/github-push-action@master
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            branch: badges
            directory: badges

  Sanitizers:
    name: Advanced tests using all functionnalities and detecting UB, leaks, etc.
    runs-on: ubuntu-latest
    needs: [pre-ci]
    outputs:
      configure: ${{ steps.cmake-configure.outcome }}
      build: ${{ steps.cmake-build.outcome }}
      install: ${{ steps.cmake-install.outcome }}
      total: ${{ steps.status.outputs.total }}
      passed: ${{ steps.status.outputs.passed }}
      failed: ${{ steps.status.outputs.failed }}

    steps:
      - uses: actions/checkout@v3

      - name: Installing dependencies
        run: sudo apt install -y libboost-all-dev libomp-dev

      - name: Installing clang toolchain
        run: sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"

      - name: CMake configure
        id: cmake-configure
        run: CC=clang CXX=clang++ cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug
        shell: bash

      - name: CMake build
        id: cmake-build
        run: CC=clang CXX=clang++ cmake --build ${{github.workspace}}/build --config Debug
        shell: bash

      - name: CMake Install
        id: cmake-install
        run: sudo cmake --install ${{github.workspace}}/build
        shell: bash

      - name: Test templates for UB, leaks and OOB
        if: ${{ always() && steps.cmake-install.conclusion == 'success' }}
        run: |
          CC=clang CXX=clang++ EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" --no-cuda --ez-args "--savePopulation 1 --nbGen 3 --popSize 100 --nbOffspring 1.0" --cmake-args "-DCMAKE_BUILD_TYPE=Debug -DSANITIZE=ON" --examples-directory ${{github.workspace}}/examples/templates --verbose | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Test remote island model for UB, leaks and OOB
        if: ${{ always() && steps.cmake-install.conclusion == 'success' }}
        run: |
         CC=clang CXX=clang++ EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh $EZ_PATH/bin/easena --ez-args "--nbGen 1000 --popSize 1000 --nbOffspring 1.0" --cmake-args "-DCMAKE_BUILD_TYPE=Debug -DSANITIZE=ON" --verbose --network --no-cuda --examples-directory ${{github.workspace}}/examples/templates
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash

      - name: Test templates for errors when loading population from .pop
        if: ${{ always() && steps.cmake-install.conclusion == 'success' }}
        run: |
         CC=clang CXX=clang++ EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh $EZ_PATH/bin/easena --ez-args "--startFromFile 1 --nbGen 3 --popSize 100 --nbOffspring 1.0" --cmake-args "-DCMAKE_BUILD_TYPE=Debug -DSANITIZE=ON" --verbose --no-cuda --examples-directory ${{github.workspace}}/examples/templates
          result_code=${PIPESTATUS[0]}
          exit $result_code
        shell: bash


      - name: Output examples status
        id: status
        if: ${{ always() }}
        run: |
          LINE=$(cat examples.output | sed -n 's/passed://p' | sed -n 's/\(.\[[[:digit:]]\+\)*\(;[[:digit:]]\+\)*\(m\)*//pg')
          NBE=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(echo ${LINE} | sed -n 's/\([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          FAILED=$((NBE - PASSED))
          echo "total=${NBE}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED}" >> $GITHUB_OUTPUT
        shell: bash

