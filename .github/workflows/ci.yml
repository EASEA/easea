# action originating from CMake action
name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  pre-ci:
    name: Configure workflow
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Extract branch name
      id: extract_branch
      shell: bash
      run: |
        TMP_PULL_HEAD_REF="${{ github.head_ref }}"
        TMP_GITHUB_REF="${GITHUB_REF#refs/heads/}"
        EXPORT_VALUE=""
        if [ "${TMP_PULL_HEAD_REF}" != "" ]
        then
            EXPORT_VALUE="${TMP_PULL_HEAD_REF}"
        else
            EXPORT_VALUE="${TMP_GITHUB_REF}"
        fi
        echo "##[set-output name=branch;]${EXPORT_VALUE}"

  configure:
    runs-on: ubuntu-latest
    name: Configure Easea
    needs: [pre-ci]

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      id: configure
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      continue-on-error: true

    - name: Output install status
      run: echo "##[set-ouput name=install;]${{steps.install.outcome}}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-configured
        path: ${{github.workspace}}/build

  build:
    runs-on: ubuntu-latest
    name: Build Easea
    needs: [configure]

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-configured
          path: ${{github.workspace}}/build

      - name: Building easea
        id: build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

  install:
    runs-on: ubuntu-latest
    name: Installing Easea
    needs: [build]

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

      - name: Install
        run: sudo cmake --install ${{github.workspace}}/build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: installed
          path: /usr/local/easena

  test:
    runs-on: ubuntu-latest
    name: Testing Easea
    needs: [install]

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: built
          path: ${{github.workspace}}/build

      - name: Installing easea
        run: sudo cmake --install ${{github.workspace}}/build

      - name: Installing CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.7
        with:
          cuda: '11.7.0'

      - name: Build examples
        run: |
          EZ_PATH=/usr/local/easena/ bash ${{github.workspace}}/examples/build-all.sh "/usr/local/easena/bin/easena" | tee examples.output
          result_code=${PIPESTATUS[0]}
          exit $result_code
        continue-on-error: true

      - name: Output examples status
        run: |
          NBE=$(cat examples.output | sed -n 's/passed: \([[:digit:]]\+\)\/\([[:digit:]]\+\)/\2/p')
          PASSED=$(cat examples.output | sed -n 's/passed: \([[:digit:]]\+\)\/\([[:digit:]]\+\)/\1/p')
          echo "##[set-ouput name=nb_examples;]${NBE}"
          echo "##[set-ouput name=passed;]${PASSED}"

          # badges:
          #   runs-on: ubuntu-latest
          #   name: Create badges for this branch
          #   steps:
          #     - uses: actions/checkout@v3
          #       with:
          #         ref: badges
          #
          #         #   - name: Create badge repository
          #     run: mkdir -p badges
          #
          #   - name: Generate the badge SVG image
          #     uses: emibcn/badge-action@v1
          #     id: badge
          #     with:
          #       label: 'Build'
          #       status: ${{steps.build.outcome == 'success' && 'passed' || 'failed' }}
          #       color: ${{steps.build.outcome == 'success' && 'green' || 'red' }}
          #       path: badges/build.svg
          #
          #   - name: Commit badge
          #     env:
          #       BRANCH: ${{ steps.extract_branch.outputs.branch }}
          #     working-directory: ./badges
          #     run: |
          #       git config --local user.email "action@github.com"
          #       git config --local user.name "GitHub Action"
          #       mkdir -p "${BRANCH}"
          #       mv *.svg "${BRANCH}"
          #       git add "${BRANCH}/"
          #       # Will give error if badge did not changed
          #       git commit -m "Add/Update badge" || true
          #
          #   - name: Push badge commit
          #     uses: ad-m/github-push-action@master
          #     with:
          #       github_token: ${{ secrets.GITHUB_TOKEN }}
          #       branch: badges
          #       directory: badges
